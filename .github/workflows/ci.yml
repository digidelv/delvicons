name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

jobs:
  test:
    name: Test & Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build project
        run: npm run build

      - name: Test build artifacts
        run: |
          test -f dist/index.js
          test -f dist/index.d.ts
          test -f dist/delvicons.css
          test -d dist/react
          test -d dist/vue
          test -d dist/angular
          test -d dist/vanilla

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run visual tests
        run: npm run test:visual

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Security audit
        run: npm audit --audit-level high

      - name: Check for vulnerabilities
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      
      - run: npx audit-ci --config audit-ci.json

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npm run analyze

      - name: Comment bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const stats = fs.readFileSync('bundle-stats.json', 'utf8');
              const bundleData = JSON.parse(stats);
              
              const comment = \`
              ## ðŸ“¦ Bundle Analysis
              
              | Package | Size | Gzipped |
              |---------|------|---------|
              | Main | \${bundleData.main.size} | \${bundleData.main.gzipped} |
              | React | \${bundleData.react.size} | \${bundleData.react.gzipped} |
              | Vue | \${bundleData.vue.size} | \${bundleData.vue.gzipped} |
              | Angular | \${bundleData.angular.size} | \${bundleData.angular.gzipped} |
              | Vanilla | \${bundleData.vanilla.size} | \${bundleData.vanilla.gzipped} |
              | CSS | \${bundleData.css.size} | \${bundleData.css.gzipped} |
              \`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Bundle stats not found, skipping comment');
            }

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test, security, bundle-analysis]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release Assets
        run: |
          tar -czf delvicons-${{ github.event.release.tag_name }}.tar.gz dist/
          
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./delvicons-${{ github.event.release.tag_name }}.tar.gz
          asset_name: delvicons-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip